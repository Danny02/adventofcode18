#ip 4
addi 4 16 4 // 0: offset ip by 16
seti 1 8 1  // 1: r1 = 1                do {
setr 1 3 5  // 2: r5 = r1                    do {
mulr 1 5 3  // 3: r3 = r1 * r5                if(r2 >= r5 * r1) { call sub }
gtrr 2 3 3  // 4: r3 = r3 < r2                --
addr 4 3 4  // 5: offset ip by r3             --
seti 35 0 4 // 6: jump to 35                  --
addi 5 1 5  // 7: r5++                    } while(r5++ <= r2)
gtrr 5 2 3  // 8: r3 = r5 > r2            --
addr 4 3 4  // 9: offset ip by r3         --
seti 2 2 4  // 10: jump to 2              --
addi 0 0 0  // 11: noop
addi 1 1 1  // 12: r1++                 } while(r1++ <= r2)
gtrr 1 2 3  // 13: r3 = r1 > r2         --
addr 3 4 4  // 14: offset by r3         --
seti 1 4 4  // 15: jump to 1            --
mulr 4 4 4  // 16: ip = ip * ip
addi 2 2 2  // 17: r2 = 2               r2 = 8 * 19 * 11 = 1672
mulr 2 2 2  // 18: r2 = r2 * r2         --
mulr 4 2 2  // 19: r2 *= ip             --
muli 2 11 2 // 20: r2 *= 11             --
addi 3 6 3  // 21: r3 += 6              r3 += 6 * 22 + 8 = 140
mulr 3 4 3  // 22: r3 *= ip             --
addi 3 8 3  // 23: r3 += 8              --
addr 2 3 2  // 24: r2 += r3
addr 4 0 4  // 25: offset by r0
seti 0 1 4  // 26: jump to 0
setr 4 4 3  // 27: r3 = ip              -- r3 = 27 * 28 + 29 * 30 *14 * 32 = 390516
mulr 3 4 3  // 28: r3 *= ip
addr 4 3 3  // 29: r3 += ip
mulr 4 3 3  // 30: r3 *= ip
muli 3 14 3 // 31: r3 *= 14
mulr 3 4 3  // 32: r3 *= ip
addr 2 3 2  // 33: r2 += r3
seti 0 4 0  // 34: r0 = 0
seti 0 7 4  // 35: jump to 0
mulr 1 5 3  // 36: r3 = r1 * r5                if(r2 > r5 * r1) { break inner loop }
eqrr 3 2 3  // 37: r3 = r3 == r2               {
addr 3 4 4  // 38: offset ip by r3                  break inner loop
seti 11 0 4  // 39: jump to 11                 } else {
addr 1 0 0  // 40: r0 += r1                         r0 += r1 + r5
addr 5 0 0  // 41: r0 += r5                    }
seti 11 0 4 // 42: jump to 11